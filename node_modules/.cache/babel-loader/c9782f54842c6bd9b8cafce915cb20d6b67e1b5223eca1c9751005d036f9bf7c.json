{"ast":null,"code":"var _jsxFileName = \"/Users/Chuan/Java Full Stack Local/Mini Project/MD02/list_student__manager/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Control from './components/Control.js';\nimport ListStudent from './components/ListStudent.js';\nimport Form from './components/Form.js';\nimport React, { Component } from 'react';\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       selectedStudent: {},\n//       actionName: '',\n//       isForm: -1,\n//       sortDir: '',\n//       sortBy: '',\n//       searchData: '',\n//       isToggle: false,\n//       students: []\n//     }\n//   }\n\n//   componentWillMount = () => {\n//     class Student {\n//       constructor(studentId, studentName, studentAge, studentGender, studentDateBirth, studentPlaceBirth, studentAddress) {\n//         this.studentId = studentId;\n//         this.studentName = studentName;\n//         this.studentAge = studentAge;\n//         this.studentGender = studentGender;\n//         this.studentDateBirth = studentDateBirth;\n//         this.studentPlaceBirth = studentPlaceBirth;\n//         this.studentAddress = studentAddress\n\n//       }\n//     }\n//     let intStudentDB = [];\n//     intStudentDB[0] = new Student(\"SV001\", \"Nguyễn Văn Anh\", 20, true, \"2002-11-20\", \"Hà Nội\", \"Hà Nội\")\n//     intStudentDB[1] = new Student(\"SV002\", \"Nguyễn Thanh Hà\", 19, false, \"2003-01-01\", \"Đà Nẵng\", \"Đà Nẵng\")\n//     intStudentDB[2] = new Student(\"SV003\", \"Nguyễn Văn Cương\", 21, true, \"2002-11-20\", \"Quảng Ninh\", \"Sài Gòn\")\n\n//     let studentDatabase = JSON.parse(localStorage.getItem('studentDatabase'))\n//     if (studentDatabase == null) {\n//       localStorage.setItem('studentDatabase', JSON.stringify(intStudentDB))\n//       studentDatabase = JSON.parse(localStorage.getItem('studentDatabase'))\n//     }\n//     this.setState({\n//       students: studentDatabase\n//     })\n//   }\n\n//   // componentWillUpdate = () => {\n//   //   console.log(\"componentWillUpdate\", this.state.students);\n//   // }\n\n//   componentDidUpdate = () => {\n//     // console.log(\"componentDidUpdate\", this.state.students);\n//     localStorage.setItem('studentDatabase', JSON.stringify(this.state.students))\n//   }\n\n//   toggleForm = (status, actionName, selectedStudent) => {\n//     this.setState({\n//       isToggle: status,\n//       actionName: actionName,\n//       selectedStudent: selectedStudent\n//     })\n//   }\n\n//   inputInfoForm = (studentId) => {\n//     for (const key in this.state.students) {\n//       if (studentId == this.state.students[key].studentId) {\n//         // console.log(key);\n//         // return key;\n//         this.setState({\n//           isForm: key\n//         })\n//       }\n//     }\n//   }\n\n//   setSearchData = (searchData) => {\n//     this.setState({\n//       searchData: searchData,\n//     })\n//   }\n\n//   setSortData = (sortDir, sortBy) => {\n//     this.setState({\n//       sortDir: sortDir,\n//       sortBy: sortBy\n//     })\n//   }\n\n//   setNewStudent = (isToggle, newStudent) => {\n//     this.setState({\n//       isToggle: isToggle\n//     })\n//     this.state.students.push(newStudent)\n//   }\n\n//   updateInfoStudent = (isToggle, studentUpdated, currentStudentId) => {\n//     let students = this.state.students.map(student => {\n//       if (student.studentId == currentStudentId) {\n//         return student = studentUpdated\n//       }\n//       else {\n//         return student;\n//       }\n//     })\n//     this.setState({\n//       isToggle: isToggle,\n//       students: students\n//     })\n//   }\n\n//   deleteInfoStudent = (deletedStudent) => {\n//     let students = this.state.students.filter(student => {\n//       if (student.studentId != deletedStudent.studentId) {\n//         return student\n//       }\n//     })\n//     this.setState({\n//       students: students\n//     })\n//   }\n\n//   render() {\n//     let students = [];\n//     // Search Data\n//     if (this.state.searchData != '') {\n//       this.state.students.forEach(student => {\n//         if (student.studentName.toLowerCase().includes(this.state.searchData.toLowerCase())) {\n//           students.push(student);\n//         }\n//       })\n//     }\n//     else {\n//       students = [...this.state.students]\n//     }\n//     //Sort Data\n//     if (this.state.sortDir != '') {\n//       if (this.state.sortDir == 'studentName') {\n//         if (this.state.sortBy == 'ASC') {\n//           students.sort((a, b) => (a.studentName > b.studentName) ? 1 : (a.studentName < b.studentName) ? -1 : 0)\n//         }\n//         else {\n//           students.sort((a, b) => (b.studentName > a.studentName) ? 1 : (b.studentName < a.studentName) ? -1 : 0)\n//         }\n//       }\n//       else {\n//         if (this.state.sortBy == 'ASC') {\n//           students.sort((a, b) => (a.studentAge - b.studentAge))\n//         }\n//         else {\n//           students.sort((a, b) => (b.studentAge - a.studentAge))\n//         }\n//       }\n//     }\n//     let elementForm;\n//     let indexStudent;\n//     if (this.state.isForm != -1) {\n//       indexStudent = this.state.isForm;\n//     }\n\n//     if (this.state.isToggle) {\n//       elementForm = <Form actionName={this.state.actionName} selectedStudent={this.state.selectedStudent} controlForm={this.toggleForm} listStudents={this.state.students} id={indexStudent} setNewStudent={this.setNewStudent} updateInfoStudent={this.updateInfoStudent}></Form>;\n//     }\n//     else {\n//       elementForm = '';\n//     }\n\n//     // console.log(this.state.students);\n//     return (\n//       <div className=\"App\">\n//         <div className=\"row\">\n//           <div className=\"col-lg-7 grid-margin stretch-card\">\n//             <div className=\"card\">\n//               {/* START CONTROL */}\n//               <Control controlForm={this.toggleForm} controlFormID={this.toggleFormID} setSearchData={this.setSearchData} setSortData={this.setSortData}></Control>\n//               {/* END CONTROL */}\n//               {/* START LIST STUDENT */}\n//               <ListStudent controlForm={this.toggleForm} listStudents={students} deleteInfoStudent={this.deleteInfoStudent}></ListStudent>\n//               {/* END LIST STUDENT */}\n//             </div>\n//           </div>\n//           {/* START FORM SINH VIEN */}\n//           {elementForm}\n//           {/* END FORM SINH VIÊN */}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-7 grid-margin stretch-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(Control, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ListStudent, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), elementForm]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Control","ListStudent","Form","React","Component","App","elementForm"],"sources":["/Users/Chuan/Java Full Stack Local/Mini Project/MD02/list_student__manager/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Control from './components/Control.js'\nimport ListStudent from './components/ListStudent.js'\nimport Form from './components/Form.js';\nimport React, { Component } from 'react';\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       selectedStudent: {},\n//       actionName: '',\n//       isForm: -1,\n//       sortDir: '',\n//       sortBy: '',\n//       searchData: '',\n//       isToggle: false,\n//       students: []\n//     }\n//   }\n\n//   componentWillMount = () => {\n//     class Student {\n//       constructor(studentId, studentName, studentAge, studentGender, studentDateBirth, studentPlaceBirth, studentAddress) {\n//         this.studentId = studentId;\n//         this.studentName = studentName;\n//         this.studentAge = studentAge;\n//         this.studentGender = studentGender;\n//         this.studentDateBirth = studentDateBirth;\n//         this.studentPlaceBirth = studentPlaceBirth;\n//         this.studentAddress = studentAddress\n\n//       }\n//     }\n//     let intStudentDB = [];\n//     intStudentDB[0] = new Student(\"SV001\", \"Nguyễn Văn Anh\", 20, true, \"2002-11-20\", \"Hà Nội\", \"Hà Nội\")\n//     intStudentDB[1] = new Student(\"SV002\", \"Nguyễn Thanh Hà\", 19, false, \"2003-01-01\", \"Đà Nẵng\", \"Đà Nẵng\")\n//     intStudentDB[2] = new Student(\"SV003\", \"Nguyễn Văn Cương\", 21, true, \"2002-11-20\", \"Quảng Ninh\", \"Sài Gòn\")\n\n//     let studentDatabase = JSON.parse(localStorage.getItem('studentDatabase'))\n//     if (studentDatabase == null) {\n//       localStorage.setItem('studentDatabase', JSON.stringify(intStudentDB))\n//       studentDatabase = JSON.parse(localStorage.getItem('studentDatabase'))\n//     }\n//     this.setState({\n//       students: studentDatabase\n//     })\n//   }\n\n//   // componentWillUpdate = () => {\n//   //   console.log(\"componentWillUpdate\", this.state.students);\n//   // }\n\n//   componentDidUpdate = () => {\n//     // console.log(\"componentDidUpdate\", this.state.students);\n//     localStorage.setItem('studentDatabase', JSON.stringify(this.state.students))\n//   }\n\n//   toggleForm = (status, actionName, selectedStudent) => {\n//     this.setState({\n//       isToggle: status,\n//       actionName: actionName,\n//       selectedStudent: selectedStudent\n//     })\n//   }\n\n\n//   inputInfoForm = (studentId) => {\n//     for (const key in this.state.students) {\n//       if (studentId == this.state.students[key].studentId) {\n//         // console.log(key);\n//         // return key;\n//         this.setState({\n//           isForm: key\n//         })\n//       }\n//     }\n//   }\n\n//   setSearchData = (searchData) => {\n//     this.setState({\n//       searchData: searchData,\n//     })\n//   }\n\n//   setSortData = (sortDir, sortBy) => {\n//     this.setState({\n//       sortDir: sortDir,\n//       sortBy: sortBy\n//     })\n//   }\n\n//   setNewStudent = (isToggle, newStudent) => {\n//     this.setState({\n//       isToggle: isToggle\n//     })\n//     this.state.students.push(newStudent)\n//   }\n\n//   updateInfoStudent = (isToggle, studentUpdated, currentStudentId) => {\n//     let students = this.state.students.map(student => {\n//       if (student.studentId == currentStudentId) {\n//         return student = studentUpdated\n//       }\n//       else {\n//         return student;\n//       }\n//     })\n//     this.setState({\n//       isToggle: isToggle,\n//       students: students\n//     })\n//   }\n\n//   deleteInfoStudent = (deletedStudent) => {\n//     let students = this.state.students.filter(student => {\n//       if (student.studentId != deletedStudent.studentId) {\n//         return student\n//       }\n//     })\n//     this.setState({\n//       students: students\n//     })\n//   }\n\n//   render() {\n//     let students = [];\n//     // Search Data\n//     if (this.state.searchData != '') {\n//       this.state.students.forEach(student => {\n//         if (student.studentName.toLowerCase().includes(this.state.searchData.toLowerCase())) {\n//           students.push(student);\n//         }\n//       })\n//     }\n//     else {\n//       students = [...this.state.students]\n//     }\n//     //Sort Data\n//     if (this.state.sortDir != '') {\n//       if (this.state.sortDir == 'studentName') {\n//         if (this.state.sortBy == 'ASC') {\n//           students.sort((a, b) => (a.studentName > b.studentName) ? 1 : (a.studentName < b.studentName) ? -1 : 0)\n//         }\n//         else {\n//           students.sort((a, b) => (b.studentName > a.studentName) ? 1 : (b.studentName < a.studentName) ? -1 : 0)\n//         }\n//       }\n//       else {\n//         if (this.state.sortBy == 'ASC') {\n//           students.sort((a, b) => (a.studentAge - b.studentAge))\n//         }\n//         else {\n//           students.sort((a, b) => (b.studentAge - a.studentAge))\n//         }\n//       }\n//     }\n//     let elementForm;\n//     let indexStudent;\n//     if (this.state.isForm != -1) {\n//       indexStudent = this.state.isForm;\n//     }\n\n//     if (this.state.isToggle) {\n//       elementForm = <Form actionName={this.state.actionName} selectedStudent={this.state.selectedStudent} controlForm={this.toggleForm} listStudents={this.state.students} id={indexStudent} setNewStudent={this.setNewStudent} updateInfoStudent={this.updateInfoStudent}></Form>;\n//     }\n//     else {\n//       elementForm = '';\n//     }\n\n\n//     // console.log(this.state.students);\n//     return (\n//       <div className=\"App\">\n//         <div className=\"row\">\n//           <div className=\"col-lg-7 grid-margin stretch-card\">\n//             <div className=\"card\">\n//               {/* START CONTROL */}\n//               <Control controlForm={this.toggleForm} controlFormID={this.toggleFormID} setSearchData={this.setSearchData} setSortData={this.setSortData}></Control>\n//               {/* END CONTROL */}\n//               {/* START LIST STUDENT */}\n//               <ListStudent controlForm={this.toggleForm} listStudents={students} deleteInfoStudent={this.deleteInfoStudent}></ListStudent>\n//               {/* END LIST STUDENT */}\n//             </div>\n//           </div>\n//           {/* START FORM SINH VIEN */}\n//           {elementForm}\n//           {/* END FORM SINH VIÊN */}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"row\">\n        <div className=\"col-lg-7 grid-margin stretch-card\">\n          <div className=\"card\">\n            {/* START CONTROL */}\n            <Control></Control>\n            {/* END CONTROL */}\n            {/* START LIST STUDENT */}\n            <ListStudent></ListStudent>\n            {/* END LIST STUDENT */}\n          </div>\n        </div>\n        {/* START FORM SINH VIEN */}\n        {elementForm}\n        {/* END FORM SINH VIÊN */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;;AAExb,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB;MAAK,SAAS,EAAC,KAAK;MAAA,wBAClB;QAAK,SAAS,EAAC,mCAAmC;QAAA,uBAChD;UAAK,SAAS,EAAC,MAAM;UAAA,wBAEnB,QAAC,OAAO;YAAA;YAAA;YAAA;UAAA,QAAW,eAGnB,QAAC,WAAW;YAAA;YAAA;YAAA;UAAA,QAAe;QAAA;UAAA;UAAA;UAAA;QAAA;MAEvB;QAAA;QAAA;QAAA;MAAA,QACF,EAELC,WAAW;IAAA;MAAA;MAAA;MAAA;IAAA;EAER;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,KArBQD,GAAG;AAuBZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}